/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/


public class Main {
    public static Prime seq = new Prime();

    public static void main(String []args) {
        final int MAX = 500;

        long n = find(MAX);
        System.out.println("Answer " + n * (n + 1)/2);

    }

    public static long find(long n) {
        long i;
        long divA, divB, divC;

        for(i = 2; true; i ++) {
        /*         Holy shit. I can't think of a simpler way
        of writting it that doesn't use hashtables.
        */
            divA = nDivisors((long)i/(i % 2 == 0 ? 2L : 1L));
            divB = nDivisors((long)(i + 1)/((i + 1) % 2 == 0 ? 2L : 1L));
            if(divA * divB >= n)
                return i;


        }
    }

    public static long nDivisors(long n) {
        /* Given arr = [a_1, a_2, a_3, ...]
        it returns ...
        p_1:e_1, p_2:e_2, ...
        It is the prime factorization for a_1 * a_2 * a_3 ... */

        long i;
        long prod = 1;
        long [] term;

        for(seq.reset();  n != 1;) {
            i    = seq.nextPrime();
            term = consume(n, i);
            n    = term[0];
            prod = prod * (term[1] + 1);
        }


        return prod;
    }
    
    public static long [] consume(long n, long p) {
        long [] term = {n, 0};

        for(; term[0] % p == 0;) {
            term[0] = (long)term[0] / p;
            term[1]++;
        }
        
        return term;
    }


}






